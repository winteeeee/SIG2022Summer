# =================================================================================================================================================
# 모듈 사용 방법 
# convert(입력) 

# 출력 
# 텍스트 파일내 단어 있음 ('0', **) 
# 텍스트 파일내 단어 없음 ('1', 입력 그대로 출력) 

# 문장/ 단어 입력 -> 코사인 유사도로 1차 판정 (소리와 표기가 일정 수준 유사하면 필터) -> 코사인 유사도로 필터 안 되는 우회를 학습 모델로 필터
# '1'이면 학습 모델에 입력으로
# '0'이면 필터되었으므로 종료
# =================================================================================================================================================
def switch(value):
    return {
        'ㄲ':[1   ,0.5 ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㄱ':[0.5 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅋ':[0.3 ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㅆ':[0   ,0   ,0   ,1   ,0.5 ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅅ':[0   ,0   ,0   ,0.5 ,1   ,0.8 ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        '^' :[0   ,0   ,0   ,0   ,0.8 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㄸ':[0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0.3 ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㄷ':[0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0.5 ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅌ':[0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0.5 ,1   ,0   ,0.3 ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅉ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0.3 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅈ':[0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.5 ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅊ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㅃ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅂ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0.5 ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅍ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,1   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㄹ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㄴ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅁ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.3 ,0   ,0.5 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0],
        'ㅇ':[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0   ,0],
        '0' :[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,1   ,0   ,0   ,0   ,0], 
        'o' :[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,0   ,1   ,0   ,0   ,0], 
        'O' :[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,0   ,0   ,1   ,0   ,0], 
        '@' :[0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,0   ,0   ,0   ,1   ,0],
        'ㅎ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.8 ,0   ,0   ,0   ,0   ,1],
        
        
        'ㅛ':[1   ,0.5 ,0   ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅠ':[0.5 ,1   ,0.5 ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅜ':[0   ,0.5 ,1   ,0.3 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0],
        'ㅗ':[0.5 ,0.3 ,0.3 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅡ':[0.3 ,0.3 ,0.5 ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㅟ':[0   ,0   ,0.3 ,0   ,0   ,1   ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0],
        'ㅢ':[0   ,0   ,0   ,0   ,0.5 ,0.5 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0.3 ,0.3 ,0.3],
        'ㅣ':[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        '1' :[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.8 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'i' :[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.8 ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'l' :[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.8 ,0   ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],  
        '!' :[0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.8 ,0   ,0   ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅚ':[0   ,0   ,0   ,0.3 ,0   ,0.5 ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅔ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅖ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0.5 ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0], 
        'ㅐ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅒ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0.5 ,0.5 ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        
        'ㅑ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅏ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0], 
        'r' :[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0   ,0   ,0],
        'ㅓ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,1   ,0.5 ,0   ,0   ,0   ,0],
        'ㅕ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0   ,0   ,0],

        'ㅘ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,1   ,0.5 ,0   ,0],
        'ㅙ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1   ,0   ,0],
        'ㅝ':[0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,0   ,0   ,0   ,1   ,0.5],
        'ㅞ':[0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.3 ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0.5 ,1],
    }.get(value, [0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0   ,0 ,0])
# ==================================================================================================================================================
from jamo import h2j, j2hcj

def seperate_consonants(word):
    seperated_word = j2hcj(h2j(word))
    list = []
    for a in seperated_word:
        list.append(a)
    return list
# ==================================================================================================================================================

import numpy as np
from numpy import dot
from numpy.linalg import norm

def vectorize(word):
    list = seperate_consonants(word)
    vector = []
    for char in list:
        vector= vector + switch(char)
    return np.array(vector)

def cos_sim(vector1, vector2):
    if len(vector1) != len(vector2):
        return 0
    return dot(vector1, vector2) / (norm(vector1) * norm(vector2))

# ==================================================================================================================================================
def get_cos_result(word1, word2):
    vector1 = vectorize(word1)
    vector2 = vectorize(word2)
    return cos_sim(vector1, vector2)
    

# ==================================================================================================================================================

import pandas as pd

def convert(input):

    word_list = pd.read_csv('C:\\Users\\Han SeongMin\\IdeaProjects\\SIG2022Summer\\Filtering_Module\\Toxic_Word_List.csv', encoding='UTF-8')
    word_list = word_list['toxic_word_list'].values

    max = 0
    for word in word_list:
        temp = get_cos_result(input, word.strip())
        if max < temp :
            max = temp 

    print(max)

    if max > 0.8:
        return ('*'*len(input))
    else:
        return (input)
    
        
